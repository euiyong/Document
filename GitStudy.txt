OS별 엔터 설정 차이 세팅
 Windows : git config --global core.autocrlf true
 Mac/Linux : git config --global core.autocrlf input

Git 전역으로 사용자 이름과 이메일 주소 설정
 git config --global user.name "(본인 이름)"
 git config --global user.email "(본인 이메일)"

기본 브랜치 변경
 git config --global init.defaultBranch main
 
Git 프로젝트 생성
 git init

Git 작업 상태 
 git status
 
.gitignore 사용
 상세 : https://git-scm.com/docs/gitignore
  # .c 확장자지만 무시하지 않을 파일
   !not_ignore_this.c	
  # logs 폴더 바로 안, 또는 그 안의 다른 폴더(들) 안의 debug.log
   logs/**/debug.log

작업 파일 stage 담기
 git add tigers.yaml
 git add .
 
타임캡슐 묻기
 git commit // 이후 vi에서 내용 입력 후 wq
 git commit -m "FIRST COMMIT"
 
add와 commit 한꺼번에 
 git commit -am "(메시지)"
  새로 추가된(untracked) 파일이 없을 때 한정

Git에서 과거로 돌아가는 두 방식
 reset : 원하는 시점으로 돌아간 뒤 이후 내역들을 지웁니다.
 revert : 되돌리기 원하는 시점의 커밋을 거꾸로 실행합니다.
 
커밋 내역 확인 
 git log
 
reset 사용해서 과거로 돌아가기 
 git reset --hard (돌아갈 커밋 해시) 
 git reset --hard // 현 커밋 상태로 초기화

revert 로 과거의 커밋 되돌리기 
 git revert (되돌릴 커밋 해시)
 
브랜치 추가 
 git branch add-coach
 
브랜치 조회 
 git branch
 git branch -a
 git branch remote

브랜치 변경
 git switch add-coach

브랜치 생성과 동시에 이동하기
 git switch -c new-teams

브랜치 삭제하기
 git branch -d (삭제할 브랜치명)
 git branch -D (강제삭제할 브랜치명)
 
브랜치 이름 바꾸기 
 git branch -m (기존 브랜치명) (새 브랜치명) 
 
서로 다른 브랜치를 합치는 두 방식 
 merge : 두 브랜치를 한 커밋에 이어붙입니다. 브랜치 사용내역을 남길 필요가 있을 때 적합한 방식입니다.
 rebase : 브랜치를 다른 브랜치에 이어붙입니다. 한 줄로 깔끔히 정리된 내역을 유지하기 원할 때 적합합니다.
 
merge로 합치기 (reset 되돌리기 가능)
 main 브랜치로 이동
 git merge add-coach 
 :wq로 자동입력된 커밋 메시지 저장하여 마무리
 merge는 reset으로 되돌리기 가능
 git merge --abort : 충돌 어려울 경우
 
rebase로 합치기 
 new-teams 브랜치로 이동
 git rebase main
 git merge new-teams
 new-teams 브랜치 삭제
 git rebase --abort : 충돌 어려울 경우
 git rebase --continue : 충돌 해결 후 
 
 
[GitHub]
Personal access token 만들기
 Settings -> Developer Settings -> Personal access tokens - Generate new token
 repo 및 원하는 기능에 체크, 기간 설정 뒤 Generate token (토큰 안전한 곳에 보관)
 
로컬의 Git 저장소에 원격 저장소로의 연결 추가
 git remote add origin (원격 저장소 주소)  
 
GitHub 권장 - 기본 브랜치명을 main으로 
 git branch -M main 

로컬 저장소의 커밋 내역들 원격으로 push(업로드) 
 git push -u origin main  
 
원격 목록 보기 
 git remote
 git remote -v

GitHub에서 프로젝트 다운받기
 git clone (원격 저장소 주소)

push 할 것이 있을 시 pull 하는 두 가지 방법
 git pull --no-rebase - merge 방식
 git pull --rebase - rebase 방식 (협업시 사용 OK)

강제로 push (사용x)
 git push --force

원격의 브랜치 명시 및 기본설정
 git push -u origin from-local

원격의 변경사항 확인 (원격 브렌치도 가져옴)
 git fetch

브랜치를 생성하여 연결하고 switch
 git switch -t origin/from-remote

원격의 브랜치 삭제
 git push (원격 이름) --delete (원격의 브랜치명)















GitHub
 - push하면 로컬 git history까지 업로드
 - clone하여 다운 받으면 git history까지 다운로드


원격 브랜치 생성하고 연결하기
$ git push -u origin from-local

로컬/원격 브랜치 목록
$ git branch -a

원격 브랜치 로컬로 가져오기
$ git fetch

로컬에 같은 이름의 브랜치를 생성하여 연결하고 switch
$ git switch -t origin/from-remote

원격의 브랜치 삭제
$ git push (원격 이름) --delete (원격의 브랜치명)


* 소스트리
저장소 > 원격저장소 추가
 - 하나의 소스를 여러 remote 에 업로드 하여 관리 가능



Git VCS의 강점
 - Snapshot 방식 관리
 - 분산 저장 방식 (로컬이 버전까지 저장)
 

staging에서 내리기. 복원
git reset --hard

git rm
git mv

staging -> work 복원
$ git restore --staged (파일명)
파일 변경 사항 복원
$ git restore

$ git reset --hard : 워킹 이동, 수정 데이터 까지 삭제
$ git reset --mixed (default) : 워킹 이동, 수정 데이터 남김
$ git reest --soft  : 스테이징으로 이동

fatch와 pull 차이

hunk별 stage 진행
$ git add -p
변경사항 확인하고 커밋
$ git commit -v

stash (작업내용 잠시 치워두기?)
git stash

원하는 시점, 브랜치에서 다시 적용
git stash pop

커밋 메시지 수정 및 내용 추가 등
git commit --amend

과거 커밋 내역을 다양한 방법으로 수정 가능
git rebase -i (대상 바로 이전 커밋)
	p, pick	커밋 그대로 두기
	r, reword	커밋 메시지 변경
	e, edit	수정을 위해 정지
	d, drop	커밋 삭제
	s, squash	이전 커밋에 합치기

Git에서 추적하지 않는 파일들 삭제
git clean
	-n	삭제될 파일들 보여주기
	-i	인터렉티브 모드 시작
	-d	폴더 포함
	-f	강제로 바로 지워버리기
	-x	⚠️ .gitignore에 등록된 파일들도 삭제

특정 파일을 지정된 상태로 복구
git restore (파일명)

변경상태를 스테이지에서 워킹 디렉토리로 돌려놓기
git restore --staged (파일명)

파일을 특정 커밋의 상태로 되돌리기
git restore --source=(헤드 또는 커밋 해시) 파일명

reflog는 프로젝트가 위치한 커밋이 바뀔 때마다 기록되는 내역을 보여주고 이를 사용하여 reset하기 이전 시점으로 프로젝트를 복구할 수 있습니다.
git reflog

원하는 커밋에 태그 달기
git tag (태그명) (커밋 해시) -m (메시지)

특정 태그 원격에 올리기
git push (원격명) (태그명)

특정 태그 원격에서 삭제
git push --delete (원격명) (태그명)

로컬의 모든 태그 원격에 올리기
git push --tags

Github에서 release 하기

다른 브랜치의 원하는 커밋 가져오기
git cherry-pick (체리의 해시)

다른 브랜치에서 파생된 브랜치 옮겨붙이기
git rebase --onto (도착 브랜치) (출발 브랜치) (이동할 브랜치)

다른 커밋들을 하나로 묶어 가져오기
git merge --squash (대상 브랜치)

Gitflow - 협업을 위한 브랜칭 전략
https://nvie.com/posts/a-successful-git-branching-model/
	main	제품 출시/배포
	develop	다음 출시/배포를 위한 개발 진행
	release	출시/배포 전 테스트 진행(QA)
	feature	기능 개발 // 여러 개
	hotfix	긴급한 버그 수정
	

alias 설정
git config --global alias.lg "log --graph --all --pretty=format:'%C(yellow) %h  %C(reset)%C(blue)%ad%C(reset) : %C(white)%s %C(bold green)-- %an%C(reset) %C(bold red)%d%C(reset)' --date=short"
	
git diff	
git blame
 - 파일별 수정한 이력
 - GitLens 플러그인 설치
 
Git Hooks
Git상의 이벤트마다 자동으로 실행될 스크립트를 지정

마크다운 문법
 README.md
 폴더별로 작성 가능
 
Pull request
 변경사항을 merge하기 전 리뷰를 거치기 위함. 팀원들의 동의를 거친 뒤 대상 브랜치에 적용
 
Fork
 - 레파지토리 전체를 내 레파지토리로 복사하는 것
 - Fork 후 로컬로 가져오기
  $ git clone https://github.com/euiyong/yalco-open-source.git
 
 


[TODO]
Gitmoji 다시 실습하기

커밋 메시지 컨벤션?
https://www.yalco.kr/@git-github-dive/7-1/



<GIT협업>
 GitFlow와 함께 
0. GITHUB 프로젝트 멤버 추가하기

1. 로컬 브랜치 생성
 git branch develop
 git switch develop

2. 내용 수정 후 commit / push
 git push -u origin develop

3. GITHUB에서 pull request
 Main화면에서 Compare & Pull request 
 내용 입력 후 'Create pull request'
 
4. GITHUB pull request 처리
 - Pull requests 탭에서 commit 항목 확인
 - Comment 입력 후 'Merge pull request'
 - 혹은 Close 하여 Merge request  반려 가능

5. 반려 후 다시 요청
 - branch로 들어가서 New pull request 
 - Comment 후 'Merge pull request'
 - Confirm merge
 
? 브랜치 권한은. 본인 생성한 브랜치는 본인이 삭제?
* 이슈 사용여부 결정 : 오류 나 수정건에 대하여
 - 커밋 항목에 대하여 RULE정해야 함
 
GitHub Actions = Gitlab CI/CD 

* OctoTree 크롬 플러그인
 - GitHub 트리 형태로 볼수 있도록



tracking 설정
git branch --set-upstream-to=origin/<branch> main
